import {
  Button as _Button,
  BUTTON_DESIGN_APP_BAR as _BUTTON_DESIGN_APP_BAR,
  BUTTON_DESIGN_INFO_BAR as _BUTTON_DESIGN_INFO_BAR,
  BUTTON_DESIGN_INLINE as _BUTTON_DESIGN_INLINE,
  BUTTON_DESIGN_TAB as _BUTTON_DESIGN_TAB,
  BUTTON_PRIORITY_CANCEL as _BUTTON_PRIORITY_CANCEL,
  BUTTON_PRIORITY_CONFIRM as _BUTTON_PRIORITY_CONFIRM,
  BUTTON_PRIORITY_NORMAL as _BUTTON_PRIORITY_NORMAL,
  BUTTON_PRIORITY_PRIMARY as _BUTTON_PRIORITY_PRIMARY,
  BUTTON_PRIORITY_SECONDARY as _BUTTON_PRIORITY_SECONDARY,
  BUTTON_PRIORITY_TERTIARY as _BUTTON_PRIORITY_TERTIARY,
  BUTTON_SIZE_LARGE as _BUTTON_SIZE_LARGE,
  BUTTON_SIZE_MEDIUM as _BUTTON_SIZE_MEDIUM,
  BUTTON_SIZE_SMALL as _BUTTON_SIZE_SMALL,
  CodeBlock as _CodeBlock,
  Expand as _Expand,
  Icon as _Icon,
  ICON_ADD as _ICON_ADD,
  ICON_CHECKBOX as _ICON_CHECKBOX,
  ICON_CHECKBOX_CHECKED as _ICON_CHECKBOX_CHECKED,
  ICON_CHECKBOX_DISABLED as _ICON_CHECKBOX_DISABLED,
  ICON_CHECKBOX_DISABLED_CHECKBOX as _ICON_CHECKBOX_DISABLED_CHECKBOX,
  ICON_CHECKBOX_ERROR as _ICON_CHECKBOX_ERROR,
  ICON_CHECKBOX_HOVER as _ICON_CHECKBOX_HOVER,
  ICON_CHECKBOX_HOVER_CHECKED as _ICON_CHECKBOX_HOVER_CHECKED,
  ICON_CHEVRON as _ICON_CHEVRON,
  ICON_HEVRON_DOUBLE as _ICON_HEVRON_DOUBLE,
  ICON_CLOSE as _ICON_CLOSE,
  ICON_EMAIL as _ICON_EMAIL,
  ICON_ERROR as _ICON_ERROR,
  ICON_EXPAND_COLLAPSE as _ICON_EXPAND_COLLAPSE,
  ICON_EXPORT as _ICON_EXPORT,
  ICON_INFO as _ICON_INFO,
  ICON_LOADING_RING as _ICON_LOADING_RING,
  ICON_LOADING_RIPPLE as _ICON_LOADING_RIPPLE,
  ICON_MENU as _ICON_MENU,
  ICON_MORE as _ICON_MORE,
  ICON_OPEN_TABS as _ICON_OPEN_TABS,
  ICON_PRINT as _ICON_PRINT,
  ICON_ROUND_ADD as _ICON_ROUND_ADD,
  ICON_ROUND_CLOSE as _ICON_ROUND_CLOSE,
  ICON_ROUND_REMOVE as _ICON_ROUND_REMOVE,
  ICON_VIEW_LARGE as _ICON_VIEW_LARGE,
  ICON_VIEW_MEDIUM as _ICON_VIEW_MEDIUM,
  ICON_VIEW_SMALL as _ICON_VIEW_SMALL,
  ICON_WARNING as _ICON_WARNING,
  Text as _Text,
  TEXT_ALIGN_LEFT as _TEXT_ALIGN_LEFT,
  TEXT_ALIGN_RIGHT as _TEXT_ALIGN_RIGHT,
} from '../'

import Button, {
  DESIGN_APP_BAR as BUTTON_DESIGN_APP_BAR,
  DESIGN_INFO_BAR as BUTTON_DESIGN_INFO_BAR,
  DESIGN_INLINE as BUTTON_DESIGN_INLINE,
  DESIGN_TAB as BUTTON_DESIGN_TAB,
  PRIORITY_CANCEL as BUTTON_PRIORITY_CANCEL,
  PRIORITY_CONFIRM as BUTTON_PRIORITY_CONFIRM,
  PRIORITY_NORMAL as BUTTON_PRIORITY_NORMAL,
  PRIORITY_PRIMARY as BUTTON_PRIORITY_PRIMARY,
  PRIORITY_SECONDARY as BUTTON_PRIORITY_SECONDARY,
  PRIORITY_TERTIARY as BUTTON_PRIORITY_TERTIARY,
  SIZE_LARGE as BUTTON_SIZE_LARGE,
  SIZE_MEDIUM as BUTTON_SIZE_MEDIUM,
  SIZE_SMALL as BUTTON_SIZE_SMALL,
} from '../components/Button'

import CodeBlock from '../components/CodeBlock'
import Expand from '../components/Expand'

import Icon, {
  ICON_ADD,
  ICON_CHECKBOX,
  ICON_CHECKBOX_CHECKED,
  ICON_CHECKBOX_DISABLED,
  ICON_CHECKBOX_DISABLED_CHECKBOX,
  ICON_CHECKBOX_ERROR,
  ICON_CHECKBOX_HOVER,
  ICON_CHECKBOX_HOVER_CHECKED,
  ICON_CHEVRON,
  ICON_HEVRON_DOUBLE,
  ICON_CLOSE,
  ICON_EMAIL,
  ICON_ERROR,
  ICON_EXPAND_COLLAPSE,
  ICON_EXPORT,
  ICON_INFO,
  ICON_LOADING_RING,
  ICON_LOADING_RIPPLE,
  ICON_MENU,
  ICON_MORE,
  ICON_OPEN_TABS,
  ICON_PRINT,
  ICON_ROUND_ADD,
  ICON_ROUND_CLOSE,
  ICON_ROUND_REMOVE,
  ICON_VIEW_LARGE,
  ICON_VIEW_MEDIUM,
  ICON_VIEW_SMALL,
  ICON_WARNING,
} from '../components/Icon'

import Text, {
  ALIGN_LEFT as TEXT_ALIGN_LEFT,
  ALIGN_RIGHT as TEXT_ALIGN_RIGHT,
} from '../components/Text'

describe('react-frost-core', () => {
  it('exports Button constants and component', () => {
    expect(_Button).toBe(Button)
    expect(_BUTTON_DESIGN_APP_BAR).toBe(BUTTON_DESIGN_APP_BAR)
    expect(_BUTTON_DESIGN_INFO_BAR).toBe(BUTTON_DESIGN_INFO_BAR)
    expect(_BUTTON_DESIGN_INLINE).toBe(BUTTON_DESIGN_INLINE)
    expect(_BUTTON_DESIGN_TAB).toBe(BUTTON_DESIGN_TAB)
    expect(_BUTTON_PRIORITY_CANCEL).toBe(BUTTON_PRIORITY_CANCEL)
    expect(_BUTTON_PRIORITY_CONFIRM).toBe(BUTTON_PRIORITY_CONFIRM)
    expect(_BUTTON_PRIORITY_NORMAL).toBe(BUTTON_PRIORITY_NORMAL)
    expect(_BUTTON_PRIORITY_PRIMARY).toBe(BUTTON_PRIORITY_PRIMARY)
    expect(_BUTTON_PRIORITY_SECONDARY).toBe(BUTTON_PRIORITY_SECONDARY)
    expect(_BUTTON_PRIORITY_TERTIARY).toBe(BUTTON_PRIORITY_TERTIARY)
    expect(_BUTTON_SIZE_LARGE).toBe(BUTTON_SIZE_LARGE)
    expect(_BUTTON_SIZE_MEDIUM).toBe(BUTTON_SIZE_MEDIUM)
    expect(_BUTTON_SIZE_SMALL).toBe(BUTTON_SIZE_SMALL)
  })

  it('exports CodeBlock component', () => {
    expect(_CodeBlock).toBe(CodeBlock)
  })

  it('exports Expand component', () => {
    expect(_Expand).toBe(Expand)
  })

  it('exports Icon constants and component', () => {
    expect(_Icon).toBe(Icon)
    expect(_ICON_ADD).toBe(ICON_ADD)
    expect(_ICON_CHECKBOX).toBe(ICON_CHECKBOX)
    expect(_ICON_CHECKBOX_CHECKED).toBe(ICON_CHECKBOX_CHECKED)
    expect(_ICON_CHECKBOX_DISABLED).toBe(ICON_CHECKBOX_DISABLED)
    expect(_ICON_CHECKBOX_DISABLED_CHECKBOX).toBe(
      ICON_CHECKBOX_DISABLED_CHECKBOX,
    )
    expect(_ICON_CHECKBOX_ERROR).toBe(ICON_CHECKBOX_ERROR)
    expect(_ICON_CHECKBOX_HOVER).toBe(ICON_CHECKBOX_HOVER)
    expect(_ICON_CHECKBOX_HOVER_CHECKED).toBe(ICON_CHECKBOX_HOVER_CHECKED)
    expect(_ICON_CHEVRON).toBe(ICON_CHEVRON)
    expect(_ICON_HEVRON_DOUBLE).toBe(ICON_HEVRON_DOUBLE)
    expect(_ICON_CLOSE).toBe(ICON_CLOSE)
    expect(_ICON_EMAIL).toBe(ICON_EMAIL)
    expect(_ICON_ERROR).toBe(ICON_ERROR)
    expect(_ICON_EXPAND_COLLAPSE).toBe(ICON_EXPAND_COLLAPSE)
    expect(_ICON_EXPORT).toBe(ICON_EXPORT)
    expect(_ICON_INFO).toBe(ICON_INFO)
    expect(_ICON_LOADING_RING).toBe(ICON_LOADING_RING)
    expect(_ICON_LOADING_RIPPLE).toBe(ICON_LOADING_RIPPLE)
    expect(_ICON_MENU).toBe(ICON_MENU)
    expect(_ICON_MORE).toBe(ICON_MORE)
    expect(_ICON_OPEN_TABS).toBe(ICON_OPEN_TABS)
    expect(_ICON_PRINT).toBe(ICON_PRINT)
    expect(_ICON_ROUND_ADD).toBe(ICON_ROUND_ADD)
    expect(_ICON_ROUND_CLOSE).toBe(ICON_ROUND_CLOSE)
    expect(_ICON_ROUND_REMOVE).toBe(ICON_ROUND_REMOVE)
    expect(_ICON_VIEW_LARGE).toBe(ICON_VIEW_LARGE)
    expect(_ICON_VIEW_MEDIUM).toBe(ICON_VIEW_MEDIUM)
    expect(_ICON_VIEW_SMALL).toBe(ICON_VIEW_SMALL)
    expect(_ICON_WARNING).toBe(ICON_WARNING)
  })

  it('exports Text constants and component', () => {
    expect(_Text).toBe(Text)
    expect(_TEXT_ALIGN_LEFT).toBe(TEXT_ALIGN_LEFT)
    expect(_TEXT_ALIGN_RIGHT).toBe(TEXT_ALIGN_RIGHT)
  })
})
